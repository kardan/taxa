(ns com.kardans.taxa
  (:require [clojure.set :refer [union]]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Tag
;;;

(defmulti tag
  "Returns tag from either tag, taxon or variant."
  {:arglists '([from])}
  ()
  type)

(defmethod tag cljs.core/PersistentArrayMap
  [{::keys [tag]}] tag)

(defmethod tag cljs.core/Keyword
  [tag] tag)

(defmethod tag cljs.core/PersistentVector
  [[tag _]] tag)

(defmethod tag :default
  [_] nil)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Thing
;;;

(defmulti thing
  "Returns thing from taxon or variant."
  {:arglists '([from])}
  type)

(defmethod thing cljs.core/PersistentArrayMap
  [{::keys [thing]}] thing)

(defmethod thing cljs.core/PersistentVector
  [[_ thing]] thing)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Taxon
;;;

(defn taxon
  "Creates a taxon from a thing, tag defaults to :com.kardans.taxa/ok"
  ([thing] (taxon thing ::ok))
  ([thing tag] {::tag tag
                ::thing thing}))

(defn taxon?
  "Returns true if t is a taxon"
  [t]
   (and (map? t)
         (every? #(contains? t %) '(::tag ::thing))))

(defn taxon->variant
  "Returns an old school vector variant [tag thing]."
  [{::keys [tag thing]}]
  [tag thing])

(defn taxonable?
  "True for taxon or keyword"
  [t]
  (or (taxon? t)
      (keyword t)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Hierarchy
;;;

(def taxa
  "Default hierarchy"
  (atom (make-hierarchy)))

(def effecting-fns
  "Fns effecting a hierarchy"
  (atom #{cljs.core/derive
          cljs.core/underive}))

(def non-effecting-fns
  "Fns without effect on hierarchy"
  (atom #{cljs.core/ancestors
          cljs.core/descendants
          cljs.core/isa?
          cljs.core/parents}))


;; (defn atom? [x]
;;   #?(:clj (instance? clojure.lang.IAtom x)
;;      :cljs (instance? cljs.core.Atom x)))

(defn atom? [x]
  (instance? cljs.core/Atom x))

;; Docstring and arglist??
(defn in-taxa
  [f & args]
  (let [?h (first args)
        [h f-args] (if (atom? ?h)
                     [?h (next args)]
                     [taxa args])]
    (condp contains? f
      @effecting-fns (apply (partial swap! h f) f-args)
      @non-effecting-fns (let [args2 (cons @h f-args)]
                           (apply f args2))
      (throw (ex-info "Unsupported operation"
                      {:provided f
                       :supported (union @effecting-fns @non-effecting-fns)})))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Derive taxa

(in-taxa derive ::ok ::root)
(in-taxa derive ::err ::root)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Predicates

(defn taxed?
  "Returns true if member has an isa relationship in hierarchy default parent
  :com.kardans.taxa/root"
  ([member]
   (taxed? taxa member ::root))
  ([member parent]
   (taxed? taxa member parent))
  ([hierarchy member parent]
   #_(assert (atom? hierarchy) "hierarchy should be a hierarchy in an atom")
   #_(assert (taxonable? member) "member should be taxon or tag")
   #_(assert (keyword? parent) "parent should be tag")
   (in-taxa isa? hierarchy (tag member) parent)))

(defn ok?
  "Returns true if member has an isa relationship with com.kardans.taxa/ok in
  default hierarchy"
  [member]
  (taxed? member ::ok))

(defn err?
  "Returns true if member has an isa relationship with com.kardans.taxa/err in
  default hierarchy"
  [member]
  (taxed? member ::err))
